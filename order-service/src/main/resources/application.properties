server.port=8091


# ### MySQL Connection
spring.datasource.url=jdbc:mysql://localhost:3306/d-ms_order_service?serverTimezone=America/Guayaquil
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver



# ### JPA for Spring 2.x
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


# Dev
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
#logging.level.org.hibernate.SQL=debug



# ### App
app.inventory-ms.base-url=http://inventory/api




# ### Eureka
spring.application.name=order
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka






# #### Circuit Breaker - Resilience Pattern:
management.endpoints.web.exposure.include=*

# ### Actuator: exponer todos los endpoints de actuator  <-  also for Prometheus
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always


# ### Resilience4J Properties
# To see != STATUS of CircuitBreaker (close, open, half-open)
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# registra hasta 10 eventos del CB, como el cambio de status
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# CB supervisa en f(x) de reqs
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
# CB considerara las ultimas 5 Req
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
# % del threshold al q abrirse el CB
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# t de espera en OPEN state, antes de pasar a HALF-OPEN
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# CB permite hasta 3 Req en  HALF-OPEN  status, ANTES de verificar el status del MS q fallo
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
# hace la transicion de inmediato a  HALF-OPEN  sin esperar el   waitDurationInOpenState
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true





# ### Distribute Tracing with Sleuth + Zipkin
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.async.enabled=true
# 100% de las req vayan a zipkin
spring.sleuth.sampler.probability=1.0






# ### kafka
spring.kafka.bootstrap-servers=localhost:9092
# default topic that Spring set if we do not set the topic name
spring.kafka.template.default-topic=notificationTopic
# serializar las key del msg
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# convert Java Object to JSON
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# mapping event in both MS: Damos el Path del "DTO" q sera igual en ambos MS, igual el DTO, no el path estrcitamente
spring.kafka.producer.properties.spring.json.type.mapping=event:com.alx.orderservice.event.OrderPlacedEvent

